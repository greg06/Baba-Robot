/*
 * Copyright (C) 2011 Grégory Fromain <gregoryfromain@gmail.com>
 *
 * This work is licensed under a Creative Commons Attribution-Noncommercial-Share Alike 3.0 Unported License.
 * See the following website for more information: 
 * http://creativecommons.org/licenses/by-nc-sa/3.0/
 * 
 */

package com.robot.baba;

import com.robot.baba.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.DialogInterface.OnClickListener;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.MenuItem;
import android.view.MotionEvent;
import android.view.View;
import android.widget.Button;

public class blu_car extends Activity { 
	
	//Debug
	private static final String TAG = "Baba";
    
    // Définition des contantes pour le traitement de la trame bluetooth
    public static final char ADRESSE_LUMIERE = 'l';
    public static final char ADRESSE_DEPLACEMENT = 'd';
    public static final char ADRESSE_TEMPERATURE = 't';
    public static final char ADRESSE_TOURELLE = 'x';
    
    // Constante eclairage
    public static final char FONCTION_LUMIERE_ON = 1;
    public static final char FONCTION_LUMIERE_OFF = 0;
    
    // Constante tourelle
    public static final char SERVO_Y_CENTRE = (char) (90);
    public static final char SERVO_X_CENTRE = (char) (90);
    

    
    public static final char DONNEE_VIDE = '0';
    
    // Variable du programme
    private boolean ledStat;
    private boolean connectStat = false;
    private Button led_button;
    private Button forward_button;
    private Button reverse_button;
    private Button connect_button;
    protected static final int MOVE_TIME = 80;
    private AlertDialog aboutAlert;
    private View VueAPropos;
    private View controlView;
    OnClickListener myClickListener;
    ProgressDialog myProgressDialog;
    
    private Communication_bluetooth bt_arduino = null;
    private PositionSensor sensor = null;				// Sonde multiposition (accéléromètre, boussole, GPS).
    
    private long lastTime = 0;
    
	final Handler handler = new Handler() {
        public void handleMessage(Message msg) {
            String data = msg.getData().getString("receivedData");
            
            long t = System.currentTimeMillis();
            if(t-lastTime > 100) {// Pour éviter que les messages soit coupés
                Log.v(TAG, "\n");
				lastTime = System.currentTimeMillis();
			}
            Log.v(TAG, data);
        }
    };
    
    final Handler handlerStatus = new Handler() {
        public void handleMessage(Message msg) {
            int co = msg.arg1;
            if(co == 1) {
            	Log.v(TAG, "Connected\n");
            } else if(co == 2) {
            	Log.v(TAG, "Disconnected\n");
            }
        }
    };
    
     /** Called when the activity is first created. */ 
     @Override 
     public void onCreate(Bundle savedInstanceState) { 
    	 super.onCreate(savedInstanceState);
    	 
    	 
    	 // Création de la liaison avec la carte arduino.
    	 bt_arduino = new Communication_bluetooth(handlerStatus, handler);
    	 
    	 sensor = new PositionSensor(this);

    	 
    	 // Bouton Créer la vue principale
    	 LayoutInflater inflater = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    	 VueAPropos = inflater.inflate(R.layout.vue_a_propos, null);
    	 controlView = inflater.inflate(R.layout.main, null);
    	 controlView.setKeepScreenOn(true);
    	 setContentView(controlView);
    	 
         // Récuperation des boutons du layout Main
    	 led_button = (Button) findViewById(R.id.led_button);
         forward_button = (Button) findViewById(R.id.forward_button);
         reverse_button = (Button) findViewById(R.id.reverse_button);
         connect_button = (Button) findViewById(R.id.connect_button);

         
         // Gestion des evenements dans la fenetre de dialogue d'aide et d'information
         myClickListener = new DialogInterface.OnClickListener() {
    			@Override
    			public void onClick(DialogInterface dialog, int which) {
    				switch (which) {
    				case DialogInterface.BUTTON_POSITIVE:		//clique sur Ok.
    					dialog.dismiss();						//On ferme la fenetre de dialogue.
    				break;
    				case DialogInterface.BUTTON_NEUTRAL:		//clique sur : Accès au site web
    					//Récuperation de l'URL.
    					Intent browserIntent = new Intent("android.intent.action.VIEW", Uri.parse(getResources().getString(R.string.website_url)));
    					startActivity(browserIntent);			// Lancement du navigateur internet.
    				break;
    				default: dialog.dismiss();					// Si aucun des cas valide on ferme le dialogue.
    				}
    			}
         };
         
         myProgressDialog = new ProgressDialog(this);
         
         // Creation du dialogue "A propos"
         AlertDialog.Builder builder = new AlertDialog.Builder(this);
         builder.setView(VueAPropos).setCancelable(true).setTitle(getResources().getString(R.string.app_name) + " " + getResources().getString(R.string.appVersion)).setIcon(R.drawable.blu_car_icon).setPositiveButton(getResources().getString(R.string.okButton), myClickListener).setNeutralButton(getResources().getString(R.string.websiteButton), myClickListener);
         aboutAlert = builder.create();
         
         
          /**********************************************************************
           * Button de controle de Baba
           */
          
         // Clique sur le boutton de connexion a baba
         connect_button.setOnClickListener(new View.OnClickListener() {
 			@Override
 			public void onClick(View v) {
				if (connectStat) {									// Si on est connecté, On se deconnect.
					bt_arduino.close();
				}else{												// sinon on ce connect.				
					bt_arduino.connect();
				}
				connectStat = !connectStat;
 			}
 		});
       
         // Clique sur le boutton d'eclairage
         led_button.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {
				if (ledStat) {
					bt_arduino.trame_envoi(ADRESSE_LUMIERE, FONCTION_LUMIERE_ON, DONNEE_VIDE);
					led_button.setText(R.string.ledON);		//On change le texte sur le bouton
				}else{
					bt_arduino.trame_envoi(ADRESSE_LUMIERE, FONCTION_LUMIERE_OFF, DONNEE_VIDE);
					led_button.setText(R.string.ledOFF);	
				}
				ledStat = !ledStat;							// On inverse l'etat de la variable
			}
		});
                 
         // Drive forward
         forward_button.setOnTouchListener(new View.OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if ((event.getAction() == MotionEvent.ACTION_DOWN) | (event.getAction() == MotionEvent.ACTION_MOVE)) {
					forward_button.setPressed(true);
					char vitesse = (char) (-100);
					bt_arduino.trame_envoi(ADRESSE_DEPLACEMENT, vitesse, vitesse);	
					return true;
					
				}else if (event.getAction() == MotionEvent.ACTION_UP) {
					forward_button.setPressed(false);
					bt_arduino.trame_envoi(ADRESSE_DEPLACEMENT, (char) (0), (char) (0));	
					return true;
				}
				forward_button.setPressed(false);
				return false;
			}
		});
         
         // Back up
         reverse_button.setOnTouchListener(new View.OnTouchListener() {
			
			@Override
			public boolean onTouch(View v, MotionEvent event) {
				if ((event.getAction() == MotionEvent.ACTION_DOWN) | (event.getAction() == MotionEvent.ACTION_MOVE)) {
					reverse_button.setPressed(true);
					char vitesse = (char) (30);
					bt_arduino.trame_envoi(ADRESSE_DEPLACEMENT, vitesse, vitesse);	
					return true;
					
				}else if (event.getAction() == MotionEvent.ACTION_UP) {
					reverse_button.setPressed(false);
					char vitesse = (char) (0);
					bt_arduino.trame_envoi(ADRESSE_DEPLACEMENT, vitesse, vitesse);	
					return true;
				}
				
				reverse_button.setPressed(false);
				return false;
			}
		});
        
     }     
     
/*     private final SensorEventListener mSensorListener = new SensorEventListener() {
    	 
 		@Override
 		public void onAccuracyChanged(Sensor sensor, int accuracy) {}
 		
 		@Override
 		public void onSensorChanged(SensorEvent event) {
 			
 			
 			// Checks whether to send steering command or not
 			long date = System.currentTimeMillis();
 			if (date - lastWrite > 100) {
 				xAccel.setText(" " + event.values[0]);
  			float axe_X = event.values[0];
 			float axe_Y = event.values[1];
			int pos_X = (int) ((axe_X * -4.5) + 90);
			int pos_Y = (int) ((axe_Y * 4.5) + 90);
			bt_arduino.trame_envoi(ADRESSE_TOURELLE, (char) (pos_X), (char) (pos_Y));			
 				lastWrite = date;
 			}
 		}
      };
     */
     @Override
     public boolean onCreateOptionsMenu(Menu menu) {
         MenuInflater inflater = getMenuInflater();
         inflater.inflate(R.menu.option_menu, menu);
         return true;
     }
     
     @Override
     public boolean onOptionsItemSelected(MenuItem item) {
         switch (item.getItemId()) {
         case R.id.about:
             // Show info about the author (that's me!)
        	 aboutAlert.show();
             return true;
         }
         return false;
     }

     @Override 
     public void onResume() { 
          super.onResume();
     } 

     @Override 
     public void onDestroy() {
    	 bt_arduino.close();
         super.onDestroy(); 
     } 
}